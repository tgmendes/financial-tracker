// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: batch.go

package dao

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

const batchCreateStockData = `-- name: BatchCreateStockData :batchexec
INSERT INTO stock_data (time, symbol_id, open, high, low, close, adjusted_close, volume, dividend_amount,
                        split_coefficient)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT do nothing
`

type BatchCreateStockDataBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchCreateStockDataParams struct {
	Time             pgtype.Timestamptz
	SymbolID         string
	Open             pgtype.Numeric
	High             pgtype.Numeric
	Low              pgtype.Numeric
	Close            pgtype.Numeric
	AdjustedClose    pgtype.Numeric
	Volume           pgtype.Int8
	DividendAmount   pgtype.Numeric
	SplitCoefficient pgtype.Float8
}

func (q *Queries) BatchCreateStockData(ctx context.Context, arg []BatchCreateStockDataParams) *BatchCreateStockDataBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Time,
			a.SymbolID,
			a.Open,
			a.High,
			a.Low,
			a.Close,
			a.AdjustedClose,
			a.Volume,
			a.DividendAmount,
			a.SplitCoefficient,
		}
		batch.Queue(batchCreateStockData, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchCreateStockDataBatchResults{br, len(arg), false}
}

func (b *BatchCreateStockDataBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, errors.New("batch already closed"))
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchCreateStockDataBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
