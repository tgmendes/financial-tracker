// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: copyfrom.go

package dao

import (
	"context"
)

// iteratorForCreateStockData implements pgx.CopyFromSource.
type iteratorForCreateStockData struct {
	rows                 []CreateStockDataParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateStockData) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateStockData) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Time,
		r.rows[0].SymbolID,
		r.rows[0].Open,
		r.rows[0].High,
		r.rows[0].Low,
		r.rows[0].Close,
		r.rows[0].AdjustedClose,
		r.rows[0].Volume,
		r.rows[0].DividendAmount,
		r.rows[0].SplitCoefficient,
	}, nil
}

func (r iteratorForCreateStockData) Err() error {
	return nil
}

func (q *Queries) CreateStockData(ctx context.Context, arg []CreateStockDataParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"stock_data"}, []string{"time", "symbol_id", "open", "high", "low", "close", "adjusted_close", "volume", "dividend_amount", "split_coefficient"}, &iteratorForCreateStockData{rows: arg})
}
