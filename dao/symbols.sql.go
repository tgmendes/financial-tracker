// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: symbols.sql

package dao

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSymbol = `-- name: CreateSymbol :one
INSERT INTO symbols (id, type, name, exchange)
VALUES ($1, $2, $3, $4)
RETURNING id, type, name, exchange
`

type CreateSymbolParams struct {
	ID       string
	Type     string
	Name     pgtype.Text
	Exchange pgtype.Text
}

func (q *Queries) CreateSymbol(ctx context.Context, arg CreateSymbolParams) (Symbol, error) {
	row := q.db.QueryRow(ctx, createSymbol,
		arg.ID,
		arg.Type,
		arg.Name,
		arg.Exchange,
	)
	var i Symbol
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Exchange,
	)
	return i, err
}

const listSymbolIDs = `-- name: ListSymbolIDs :many
SELECT id FROM symbols
ORDER BY id
`

func (q *Queries) ListSymbolIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listSymbolIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
